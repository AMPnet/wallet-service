syntax = "proto3";
option java_multiple_files = true;
package com.ampnet.crowdfunding.proto;

/********** IMPORTANT NOTE:***************
All amount (fiat) values in request and response messages are x100 format integers,
for example amount: 1550 is actually 15.50 EUR.
******************************************/

//////// Cooperative contract messages ///////

message GenerateAddWalletTxRequest {
    string wallet = 1;
}

message WalletActiveRequest {
    string wallet_tx_hash = 1;
}

message WalletActiveResponse {
    bool active = 1;
}

message PlatformManagerResponse {
    string wallet = 1;
}

message GenerateTransferPlatformManagerOwnershipTxRequest {
    string new_owner_wallet = 1;
}

///////// EUR contract messages //////////

message BalanceRequest {
    string wallet_tx_hash = 1;
}

message BalanceResponse {
    string balance = 1;
}

message GenerateMintTxRequest {
    string to_tx_hash = 1;
    string amount = 2;
}

message GenerateBurnFromTxRequest {
    string burn_from_tx_hash = 1;
}

message GenerateApproveWithdrawTxRequest {
    string from_tx_hash = 1;
    string amount = 2;
}

message GenerateInvestTxRequest {
    string from_tx_hash = 1;
    string project_tx_hash = 2;
    string amount = 3;
}

message TokenIssuerResponse {
    string wallet = 1;
}

message GenerateTransferTokenIssuerOwnershipTxRequest {
    string new_owner_wallet = 1;
}

///////// Organization contract //////////

///////// Project contract ///////////////

message GenerateStartRevenueSharesPayoutTxRequest {
    string from_tx_hash = 1;
    string project_tx_hash = 2;
    string revenue = 3;
}

message GenerateApproveProjectWithdrawTxRequest {
    string from_tx_hash = 1;
    string project_tx_hash = 2;
    string amount = 3;
}

message GenerateCancelInvestmentTxRequest {
    string from_tx_hash = 1;
    string project_tx_hash = 2;
}

message GetProjectsInfoRequest {
    repeated string project_tx_hashes = 1;
}

message GetProjectsInfoResponse {
    message ProjectInfo {
        string project_tx_hash = 1;
        string total_funds_raised = 2;
        string investment_cap = 3;
        string min_per_user_investment = 4;
        string max_per_user_investment = 5;
        string ends_at = 6;
        bool payout_in_process = 7;
        string balance = 8;
    }
    repeated ProjectInfo projects = 1;
}

////////// Transaction messages //////////

message PostTxRequest {
    string data = 1;
}

message PostTxResponse {
    string tx_hash = 1;
}

message PortfolioRequest {
    string tx_hash = 1;
}

message PortfolioResponse {
    message Investment {
        string project_tx_hash = 1;
        string amount = 2;
    }
    repeated Investment portfolio = 1;
}

message TransactionsRequest {
    string wallet_data = 1;
}

message InvestmentsInProjectRequest {
    string from_address = 1;
    string project_tx_hash = 2;
}

message TransactionInfoRequest {
    string tx_hash = 1;
    string from = 2;
    string to = 3;
}

message TransactionInfo {
    string from_tx_hash = 1;
    string to_tx_hash = 2;
    string amount = 3;
    string date = 4;
    TransactionType type = 5;
    TransactionState state = 6;
    string tx_hash = 7;
    SupervisorStatus supervisor_status = 8;
}

message TransactionsResponse {
    repeated TransactionInfo transactions = 1;
}

message ActiveSellOffersResponse {
    message CounterOffer {
        string buyer_tx_hash = 1;
        string price = 2;
    }
    message SellOffer {
        string seller_tx_hash = 1;
        string project_tx_hash = 2;
        string shares = 3;
        string price = 4;
        repeated CounterOffer counter_offers = 5;
    }
    repeated SellOffer offers = 1;
}

///////// Contract create messages /////////

message GenerateCreateOrganizationTxRequest {
    string from_tx_hash = 1;
}

message GenerateCreateProjectTxRequest {
    string from_tx_hash = 1;
    string organization_tx_hash = 2;
    string max_investment_per_user = 3;
    string min_investment_per_user = 4;
    string investment_cap = 5;
    string end_investment_time = 6;
}

message CreateCooperativeRequest {
    string coop = 1;
    string wallet = 2;
}

////////// Generic messages ////////////////

message RawTxResponse {
    string tx = 1;
}

message Empty {

}

////////// Types ///////////////////////////

enum SupervisorStatus {
    NOT_REQUIRED = 0;
    REQUIRED = 1;
    PROCESSED = 2;
}

enum TransactionState {
    MINED = 0;
    PENDING = 1;
    FAILED = 2;
}

enum TransactionType {
    DEPOSIT = 0;
    WITHDRAW = 1;
    INVEST = 2;
    SHARE_PAYOUT = 3;
    CANCEL_INVESTMENT = 4;
    APPROVE_INVESTMENT = 5;
    WALLET_CREATE = 6;
    ORG_CREATE = 7;
    PROJ_CREATE = 8;
    SELL_OFFER_CREATE = 9;
    APPROVE_USER_WITHDRAW = 10;
    PENDING_PROJ_WITHDRAW = 11;
    APPROVE_COUNTER_OFFER = 12;
    START_REVENUE_PAYOUT = 13;
    COOP_OWNERSHIP_TRANSFER = 14;
    EUR_OWNERSHIP_TRANSFER = 15;
    COUNTER_OFFER_PLACED = 16;
    COUNTER_OFFER_REMOVED = 17;
    SHARES_SOLD = 18;
}

///////// Service definition ////////////////

service BlockchainService {

    // Cooperative

    rpc GenerateAddWalletTx (GenerateAddWalletTxRequest) returns (RawTxResponse);
    rpc IsWalletActive (WalletActiveRequest) returns (WalletActiveResponse);
    rpc GetPlatformManager (Empty) returns (PlatformManagerResponse); // TODO: add coop to request
    rpc GenerateTransferPlatformManagerOwnershipTx (GenerateTransferPlatformManagerOwnershipTxRequest) returns (RawTxResponse);

    // EUR

    rpc GenerateMintTx (GenerateMintTxRequest) returns (RawTxResponse);
    rpc GenerateBurnFromTx (GenerateBurnFromTxRequest) returns (RawTxResponse);
    rpc GenerateApproveWithdrawTx (GenerateApproveWithdrawTxRequest) returns (RawTxResponse);
    rpc GenerateInvestTx (GenerateInvestTxRequest) returns (RawTxResponse);
    rpc GetBalance (BalanceRequest) returns (BalanceResponse);
    rpc GetTokenIssuer (Empty) returns (TokenIssuerResponse); // TODO: add coop to request
    rpc GenerateTransferTokenIssuerOwnershipTx (GenerateTransferTokenIssuerOwnershipTxRequest) returns (RawTxResponse);

    // Organization

    // Project

    rpc GenerateApproveProjectWithdrawTx (GenerateApproveProjectWithdrawTxRequest) returns (RawTxResponse);
    rpc GenerateCancelInvestmentTx (GenerateCancelInvestmentTxRequest) returns (RawTxResponse);
    rpc GenerateStartRevenueSharesPayoutTx (GenerateStartRevenueSharesPayoutTxRequest) returns (RawTxResponse);
    rpc GetProjectsInfo (GetProjectsInfoRequest) returns (GetProjectsInfoResponse);

    // Contract create

    rpc GenerateCreateOrganizationTx (GenerateCreateOrganizationTxRequest) returns (RawTxResponse);
    rpc GenerateCreateProjectTx (GenerateCreateProjectTxRequest) returns (RawTxResponse);

    // Transactions

    rpc PostTransaction (PostTxRequest) returns (PostTxResponse);
    rpc GetPortfolio (PortfolioRequest) returns (PortfolioResponse);
    rpc GetTransactions (TransactionsRequest) returns (TransactionsResponse);
    rpc GetInvestmentsInProject (InvestmentsInProjectRequest) returns (TransactionsResponse);
    rpc GetTransactionInfo (TransactionInfoRequest) returns (TransactionInfo);
    rpc GetActiveSellOffers (Empty) returns (ActiveSellOffersResponse);

    rpc CreateCooperative(CreateCooperativeRequest) returns (Empty);
}
